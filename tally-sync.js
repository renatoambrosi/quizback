const { createClient } = require('@supabase/supabase-js');

class TallySync {
    constructor() {
        // Configura√ß√£o Supabase
        this.supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );
        
        // Configura√ß√µes do projeto
        this.tableName = process.env.SUPABASE_TABLE_NAME || 'users_teste';
        
        console.log(`üîß TallySync inicializado:`);
        console.log(`üóÉÔ∏è Tabela: ${this.tableName}`);
        console.log(`üåê Supabase: ${process.env.SUPABASE_URL}`);
    }



    // ============================================
    // FUN√á√ÉO PARA CONVERTER QUALQUER DATA PARA FORMATO BRASILEIRO
    // ============================================
    convertDateToBrazilian(inputDate = null) {
        // Se n√£o receber data, usa data atual
        const date = inputDate ? new Date(inputDate) : new Date();
        
        // Obter componentes da data em GMT-3 (Brasil)
        const options = {
            timeZone: 'America/Sao_Paulo',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false
        };
        
        const formatter = new Intl.DateTimeFormatter('pt-BR', options);
        const parts = formatter.formatToParts(date);
        
        const day = parts.find(part => part.type === 'day').value;
        const month = parts.find(part => part.type === 'month').value;
        const year = parts.find(part => part.type === 'year').value;
        const hour = parts.find(part => part.type === 'hour').value;
        const minute = parts.find(part => part.type === 'minute').value;
        const second = parts.find(part => part.type === 'second').value;
        
        return `${day}-${month}-${year} ${hour}:${minute}:${second}`;
    }

    // ============================================
    // FASE 1: BUSCAR USU√ÅRIO POR UID (MANTIDA IGUAL)
    // ============================================
    async getUserByUID(uid) {
        console.log(`üöÄ IN√çCIO FASE 1 - UID: ${uid}`);
        
        try {
            console.log(`üì• FASE 1: Buscando dados para UID: ${uid}`);
            
            // Usar Google Apps Script
            const endpoint = `https://script.google.com/macros/s/AKfycbyK60u_BJFxEc573yD-LhwTJ_mDL4JxsOaZ2Pj7lkbo_k66lapaxx81Ey909-3UqFw6/exec?uid=${uid}`;
            
            console.log(`üåê Consultando: ${endpoint}`);
            console.log(`üîÑ Fazendo fetch...`);
            
            const response = await fetch(endpoint, { method: "get" });
            console.log(`üì° Response status: ${response.status}`);
            
            if (!response.ok) {
                console.log(`‚ùå Response n√£o OK: ${response.status} ${response.statusText}`);
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            console.log(`üîÑ Fazendo parse JSON...`);
            const data = await response.json();
            console.log(`üìä DADOS COMPLETOS:`, JSON.stringify(data, null, 2));

            // Mapear campos conforme nova estrutura da tabela
            const userData = {
                uid: data.uid,
                nome: data.respostas[0]?.trim(),
                email: data.respostas[1]?.trim(),
                data_registro: this.convertDateToBrazilian(data.respostas[2]), // ‚úÖ Data do Tally convertida
                iniciar_teste: true,
                concluir_teste: true,
                status_pgto_teste: 'AGUARDANDO',
                aceita_emails: true
            };
            
            console.log(`üóÉÔ∏è Inserindo no Supabase:`, userData);
            
            // Inserir ou atualizar no Supabase (UPSERT)
            const { data: insertedData, error } = await this.supabase
                .from(this.tableName)
                .upsert(userData, { onConflict: 'uid' })
                .select();
                
            if (error) {
                console.log(`‚ùå Erro Supabase:`, error);
                throw error;
            }
            
            console.log(`‚úÖ FASE 1: Usu√°rio inserido com sucesso no Supabase`);
            return insertedData[0];
            
        } catch (error) {
            console.error('‚ùå Erro FASE 1 getUserByUID:', error);
            throw error;
        }
    }

    // ============================================
    // FASE 2: ATUALIZAR AP√ìS PAGAMENTO + C√ÅLCULO INTERNO
    // ============================================
    async updateUserAfterPayment(uid, paymentData) {
        try {
            console.log(`üí≥ FASE 2: Atualizando usu√°rio ${uid} ap√≥s pagamento`);
            
            // 1. Calcular resultado do teste internamente (SEM SCRAPING)
            const resultadoTeste = await this.calcularResultadoTeste(uid);
            
            // 2. Preparar dados de atualiza√ß√£o
            const updateData = {
                status_pgto_teste: 'PAGO',
                valor_pgto_teste: '18,81',
                data_pgto_teste: paymentData.date_approved ? 
                    this.convertDateToBrazilian(paymentData.date_approved) : 
                    this.convertDateToBrazilian(),
                resultado_teste: resultadoTeste,
                link_resultado: `https://www.suellenseragi.com.br/resultado1?uid=${uid}`
            };
            
            console.log(`üîÑ Atualizando dados:`, updateData);
            
            // 3. Atualizar no Supabase
            const { data, error } = await this.supabase
                .from(this.tableName)
                .update(updateData)
                .eq('uid', uid)
                .select();
                
            if (error) {
                throw error;
            }
            
            console.log(`‚úÖ FASE 2: Usu√°rio atualizado com sucesso`);
            return data[0];
            
        } catch (error) {
            console.error('‚ùå Erro FASE 2 updateUserAfterPayment:', error);
            throw error;
        }
    }

    // ============================================
    // C√ÅLCULO INTERNO DO RESULTADO (SUBSTITUI O SCRAPING)
    // ============================================
    async calcularResultadoTeste(uid) {
        try {
            console.log(`üßÆ Calculando resultado internamente para UID: ${uid}`);
            
            // 1. Buscar respostas do Google Apps Script (mesmo endpoint da Fase 1)
            const endpoint = `https://script.google.com/macros/s/AKfycbyK60u_BJFxEc573yD-LhwTJ_mDL4JxsOaZ2Pj7lkbo_k66lapaxx81Ey909-3UqFw6/exec?uid=${uid}`;
            
            const response = await fetch(endpoint, { method: "get" });
            if (!response.ok) {
                throw new Error(`Erro ao buscar dados: ${response.status}`);
            }
            
            const data = await response.json();
            const respostas = data.respostas;
            
            console.log(`üìã Respostas recebidas (${respostas.length}):`, respostas);
            
            // 2. Mapeamento EXATO das 15 perguntas ‚Üí tags
            const mapaRespostas = {
                // PERGUNTA 1
                "Frustra√ß√£o. Parece que nada muda, j√° fiz o certo e o errado e n√£o consegui nada.": "Desordem",
                "Motiva√ß√£o, porque n√£o existe verdade, apenas resultado.": "Autossufici√™ncia",
                "Decido estudar mais e subir do jeito certo, mas sem ingenuidade.": "Prosperidade",
                "Se algu√©m consegue dessa forma, eu tamb√©m posso, s√≥ que da forma certa.": "Valida√ß√£o",
                "Raiva. √â sempre assim: os bonzinhos s√≥ se ferram.": "Medo",

                // PERGUNTA 2
                "N√£o sei nem por onde come√ßar.": "Desordem",
                "Duvido. √Äs vezes acho que minha realidade n√£o permite isso.": "Medo",
                "Acredito que posso crescer em qualquer lugar.": "Prosperidade",
                "Sinto que preciso alcan√ßar um certo n√≠vel grande para me sentir realizado e reconhecido.": "Valida√ß√£o",
                "Tenho convic√ß√£o de que, com foco e l√≥gica, eu consigo.": "Autossufici√™ncia",

                // PERGUNTA 3
                "Deixo pra l√° e sigo em frente para os meus objetivos.": "Autossufici√™ncia",
                "Converso com calma, busco entender o outro lado e n√£o ver s√≥ o meu.": "Prosperidade",
                "Falo demais ou fico no meu canto e acabo piorando a situa√ß√£o, sem querer.": "Desordem",
                "Evito conversar por medo de desagradar ou ter conflito com a pessoa.": "Medo",
                "Tento evitar confronto ou tento resolver mas fico chateado quando n√£o consigo.": "Valida√ß√£o",

                // PERGUNTA 4
                "Tor√ßo e pe√ßo para me ajudarem ao m√°ximo porque me sinto fragilizado.": "Valida√ß√£o",
                "Procuro resolver sozinho com rem√©dios por conta pr√≥pria.": "Autossufici√™ncia",
                "Me preocupo mais do que deveria.": "Medo",
                "Creio que est√° tudo bem, mas me cuido para garantir a boa recupera√ß√£o.": "Prosperidade",
                "Ignoro o m√°ximo, at√© realmente eu precisar tratar.": "Desordem",

                // PERGUNTA 5
                "Considero fazer mesmo n√£o gostando, pois tenho insatisfa√ß√£o ou vergonha do meu corpo.": "Valida√ß√£o",
                "Come√ßo e paro diversas vezes, sempre me perdendo na rotina.": "Desordem",
                "Pratico com frequ√™ncia e consci√™ncia, respeitando meus limites.": "Prosperidade",
                "N√£o fa√ßo por des√¢nimo, medo de les√µes ou vergonha.": "Medo",
                "Sou extremamente disciplinado.": "Autossufici√™ncia",

                // PERGUNTA 6
                "Se realmente eu precisar, serei firme.": "Autossufici√™ncia",
                "Quando estou bem eu como bem. Mas quando fico mal eu desando.": "Valida√ß√£o",
                "Fa√ßo ajustes graduais e consistentes.": "Prosperidade",
                "Fa√ßo mudan√ßas bruscas e acabo desistindo rapidamente.": "Desordem",
                "Fico ansioso e tento mudar, mas n√£o consigo.": "Medo",

                // PERGUNTA 7
                "Costumo me sentir in√∫til e impotente para mudar as coisas.": "Valida√ß√£o",
                "Sinto o quanto a vida n√£o √© justa.": "Autossufici√™ncia",
                "Lembro que eu sempre colho o que planto e fico em paz.": "Prosperidade",
                "Acho muito dif√≠cil qualquer mudan√ßa.": "Medo",
                "Me distraio fazendo v√°rias coisas para n√£o pensar nisso.": "Desordem",

                // PERGUNTA 8
                "Aceito com calma e reorganizo minhas a√ß√µes com clareza.": "Prosperidade",
                "Fico inquieto e incomodado com as coisas que me atrapalham.": "Valida√ß√£o",
                "Fico ansioso pensando nas consequ√™ncias negativas.": "Medo",
                "Resolvo sozinho, pois n√£o quero depender de ningu√©m.": "Autossufici√™ncia",
                "Me perco mentalmente, sem saber exatamente por onde recome√ßar.": "Desordem",

                // PERGUNTA 9
                "Evito contrariar pessoas ao tomar decis√µes.": "Valida√ß√£o",
                "Fa√ßo o que der na hora. Depois eu vejo se foi o certo.": "Desordem",
                "Avalio rapidamente e tomo minha decis√£o.": "Autossufici√™ncia",
                "Adio at√© o √∫ltimo segundo.": "Medo",
                "Coloco no papel, penso e ajo com o que tenho em m√£os.": "Prosperidade",

                // PERGUNTA 10
                "Realmente aprendi com eles.": "Prosperidade",
                "Fico p√©ssimo, me martirizando.": "Valida√ß√£o",
                "Evito pensar nisso. Fico mal quando lembro.": "Desordem",
                "Odeio errar. Mas as vezes acontece.": "Autossufici√™ncia",
                "Me culpo at√© hoje. Aquilo nunca deveria ter acontecido.": "Medo",

                // PERGUNTA 11
                "Desorganizo tudo. Depois tento arrumar.": "Desordem",
                "Reavalio com calma, sabendo que emo√ß√£o e realidade n√£o se misturam.": "Prosperidade",
                "Choro muito. Todas as minhas falhas v√™m √† tona ao mesmo tempo.": "Valida√ß√£o",
                "Fico firme e busco resolver r√°pido.": "Autossufici√™ncia",
                "Me retraio, o que eu fizer a mais poder√° dar errado.": "Medo",

                // PERGUNTA 12
                "Avalio onde errei e ajusto com calma.": "Prosperidade",
                "Me incomoda, mas fa√ßo quando der.": "Desordem",
                "Fico com a sensa√ß√£o que fracassei.": "Valida√ß√£o",
                "Fico com vontade de sumir para n√£o lidar com as consequ√™ncias.": "Medo",
                "Eu corro para compensar.": "Autossufici√™ncia",

                // PERGUNTA 13
                "A correria e obriga√ß√µes do dia a dia, que sempre tomam todo meu tempo.": "Desordem",
                "Parece que ningu√©m me enxerga e esse prop√≥sito nunca vai acontecer.": "Valida√ß√£o",
                "Ter que aprender a esperar tempo que leva para ter mais respostas.": "Prosperidade",
                "O medo de que seja tarde demais ‚Äî ou que n√£o tenha prop√≥sito nenhum na minha vida.": "Medo",
                "N√£o posso abrir m√£o do que j√° constru√≠.": "Autossufici√™ncia",

                // PERGUNTA 14
                "Servir √© o meu prop√≥sito.": "Autossufici√™ncia",
                "Uma jornada m√°gica, que conecta quem eu sou com o que posso oferecer ao mundo.": "Prosperidade",
                "Depende do dia. Ora tenho d√∫vida, ora convic√ß√£o.": "Desordem",
                "Quero me sentir √∫til e realizada cumprindo meu prop√≥sito.": "Valida√ß√£o",
                "N√£o sei ao certo‚Ä¶ e isso me constrange mais do que eu gostaria de admitir.": "Medo",

                // PERGUNTA 15
                "Uma pessoa que venceu muitas lutas e adversidades.": "Autossufici√™ncia",
                "Exemplo de f√©, transforma√ß√£o e sementes plantadas.": "Prosperidade",
                "Nada claro. Vivo dia ap√≥s dia fazendo meu melhor.": "Desordem",
                "Deixaria pouco, mas com orgulho de que conquistei com luta e honestidade.": "Medo",
                "A imagem de algu√©m que quis acertar embora nem sempre conseguisse.": "Valida√ß√£o"
            };

            // 3. Contagem das tags (igual ao Wix)
            const contagem = {
                "Medo": 0,
                "Desordem": 0,
                "Valida√ß√£o": 0,
                "Autossufici√™ncia": 0,
                "Prosperidade": 0
            };

            // 4. Processar respostas (pular nome, email e data - posi√ß√µes 0, 1 e 2)
            let respostasProcessadas = 0;
            for (let i = 3; i < respostas.length; i++) { // Come√ßar da posi√ß√£o 3 (ap√≥s nome, email e data)
                const resposta = respostas[i];
                const tag = mapaRespostas[resposta];
                
                if (tag) {
                    contagem[tag]++;
                    respostasProcessadas++;
                    console.log(`‚úÖ Resposta ${i-2}: "${resposta}" ‚Üí ${tag}`); // Ajustado para mostrar numera√ß√£o correta
                } else {
                    console.warn(`‚ö†Ô∏è Resposta n√£o mapeada: "${resposta}"`);
                }
            }

            console.log(`üìä Contagem final:`, contagem);
            console.log(`üìà Respostas processadas: ${respostasProcessadas}/15`);

            // 5. Calcular percentuais
            const total = Object.values(contagem).reduce((acc, val) => acc + val, 0);
            const percentuais = {};
            for (let tipo in contagem) {
                percentuais[tipo] = total > 0 ? Math.round((contagem[tipo] / total) * 100) : 0;
            }

            // 6. Encontrar tipo predominante
            let max = 0;
            let tipoPredominante = "";
            for (let tipo in contagem) {
                if (contagem[tipo] > max) {
                    max = contagem[tipo];
                    tipoPredominante = tipo;
                }
            }

            // 7. Determinar diagn√≥stico final (igual ao Wix)
            let diagnostico = "";
            switch (tipoPredominante) {
                case "Medo":
                    diagnostico = "Energia do Medo";
                    break;
                case "Autossufici√™ncia":
                    diagnostico = "Energia da Autossufici√™ncia";
                    break;
                case "Valida√ß√£o":
                    diagnostico = "Energia da Valida√ß√£o";
                    break;
                case "Desordem":
                    diagnostico = "Energia da Desordem";
                    break;
                case "Prosperidade":
                    // L√≥gica dos n√≠veis (igual ao Wix)
                    const percentualProsp = percentuais["Prosperidade"];
                    if (percentualProsp <= 50) {
                        diagnostico = "Energia da Prosperidade Nv.1";
                    } else if (percentualProsp <= 80) {
                        diagnostico = "Energia da Prosperidade Nv.2";
                    } else {
                        diagnostico = "Energia da Prosperidade Nv.3";
                    }
                    break;
                default:
                    diagnostico = "N√£o foi poss√≠vel calcular sua energia predominante.";
            }

            console.log(`üéØ Resultado calculado: ${diagnostico}`);
            console.log(`üìä Percentuais: ${JSON.stringify(percentuais)}`);
            
            return diagnostico;
            
        } catch (error) {
            console.error('‚ùå Erro no c√°lculo interno:', error);
            return 'Erro ao calcular resultado';
        }
    }

    // ============================================
    // FUN√á√ÉO ANTIGA DE SCRAPING (MANTIDA COMO BACKUP)
    // ============================================
    async getResultadoTeste(uid) {
        try {
            console.log(`üï∑Ô∏è Fazendo scraping para UID: ${uid}`);
            
            const url = `https://www.suellenseragi.com.br/resultado1?uid=${uid}`;
            
            // Tentativas com delay progressivo
            const delays = [3000, 7000, 5000]; // 3s, +7s, +5s = total 15s
            
            for (let i = 0; i < delays.length; i++) {
                console.log(`‚è≥ Aguardando ${delays[i]/1000}s para c√°lculo completar (tentativa ${i+1}/3)...`);
                
                // Aguardar o tempo espec√≠fico
                await new Promise(resolve => setTimeout(resolve, delays[i]));
                
                // Fazer requisi√ß√£o para ver se j√° calculou
                const response = await fetch(url);
                if (!response.ok) {
                    console.log(`‚ùå Response n√£o OK na tentativa ${i+1}: ${response.status}`);
                    continue;
                }
                
                const html = await response.text();
                
                // Buscar #diagnosticoEnergia no HTML
                const regex = /#diagnosticoEnergia[^>]*>([^<]+)</i;
                const match = html.match(regex);
                
                if (match && match[1] && match[1].trim() !== 'Carregando resultado...' && match[1].trim() !== '') {
                    const resultado = match[1].trim();
                    console.log(`‚úÖ Resultado extra√≠do ap√≥s ${(delays.slice(0, i+1).reduce((a,b) => a+b, 0))/1000}s: ${resultado}`);
                    return resultado;
                }
                
                // M√©todo alternativo: buscar por padr√µes conhecidos no HTML
                const padroes = [
                    'Energia do Medo',
                    'Energia da Desordem', 
                    'Energia da Valida√ß√£o',
                    'Energia da Autossufici√™ncia',
                    'Energia da Prosperidade Nv.1',
                    'Energia da Prosperidade Nv.2', 
                    'Energia da Prosperidade Nv.3'
                ];
                
                for (const padrao of padroes) {
                    if (html.includes(padrao)) {
                        console.log(`‚úÖ Resultado encontrado por padr√£o ap√≥s ${(delays.slice(0, i+1).reduce((a,b) => a+b, 0))/1000}s: ${padrao}`);
                        return padrao;
                    }
                }
                
                console.log(`üîÑ Tentativa ${i+1}: Ainda calculando...`);
            }
            
            // Se chegou at√© aqui, n√£o conseguiu obter resultado
            console.log(`‚ùå N√£o foi poss√≠vel obter resultado ap√≥s 15 segundos`);
            throw new Error('Resultado do teste n√£o encontrado ap√≥s m√∫ltiplas tentativas');
            
        } catch (error) {
            console.error('‚ùå Erro no scraping:', error);
            return 'Erro ao obter resultado';
        }
    }

}

module.exports = TallySync;
